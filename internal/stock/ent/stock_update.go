// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/WlayRay/order-demo/stock/ent/predicate"
	"github.com/WlayRay/order-demo/stock/ent/stock"
)

// StockUpdate is the builder for updating Stock entities.
type StockUpdate struct {
	config
	hooks    []Hook
	mutation *StockMutation
}

// Where appends a list predicates to the StockUpdate builder.
func (su *StockUpdate) Where(ps ...predicate.Stock) *StockUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StockUpdate) SetName(s string) *StockUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StockUpdate) SetNillableName(s *string) *StockUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetPrice sets the "price" field.
func (su *StockUpdate) SetPrice(s string) *StockUpdate {
	su.mutation.SetPrice(s)
	return su
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (su *StockUpdate) SetNillablePrice(s *string) *StockUpdate {
	if s != nil {
		su.SetPrice(*s)
	}
	return su
}

// SetProductID sets the "product_id" field.
func (su *StockUpdate) SetProductID(s string) *StockUpdate {
	su.mutation.SetProductID(s)
	return su
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableProductID(s *string) *StockUpdate {
	if s != nil {
		su.SetProductID(*s)
	}
	return su
}

// SetQuantity sets the "quantity" field.
func (su *StockUpdate) SetQuantity(i int32) *StockUpdate {
	su.mutation.ResetQuantity()
	su.mutation.SetQuantity(i)
	return su
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (su *StockUpdate) SetNillableQuantity(i *int32) *StockUpdate {
	if i != nil {
		su.SetQuantity(*i)
	}
	return su
}

// AddQuantity adds i to the "quantity" field.
func (su *StockUpdate) AddQuantity(i int32) *StockUpdate {
	su.mutation.AddQuantity(i)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StockUpdate) SetCreatedAt(t time.Time) *StockUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StockUpdate) SetNillableCreatedAt(t *time.Time) *StockUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StockUpdate) SetUpdatedAt(t time.Time) *StockUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// Mutation returns the StockMutation object of the builder.
func (su *StockUpdate) Mutation() *StockMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StockUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StockUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := stock.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StockUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := stock.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Stock.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Price(); ok {
		if err := stock.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Stock.price": %w`, err)}
		}
	}
	if v, ok := su.mutation.ProductID(); ok {
		if err := stock.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "Stock.product_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Quantity(); ok {
		if err := stock.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Stock.quantity": %w`, err)}
		}
	}
	return nil
}

func (su *StockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(stock.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(stock.FieldPrice, field.TypeString, value)
	}
	if value, ok := su.mutation.ProductID(); ok {
		_spec.SetField(stock.FieldProductID, field.TypeString, value)
	}
	if value, ok := su.mutation.Quantity(); ok {
		_spec.SetField(stock.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedQuantity(); ok {
		_spec.AddField(stock.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(stock.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(stock.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StockUpdateOne is the builder for updating a single Stock entity.
type StockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockMutation
}

// SetName sets the "name" field.
func (suo *StockUpdateOne) SetName(s string) *StockUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableName(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetPrice sets the "price" field.
func (suo *StockUpdateOne) SetPrice(s string) *StockUpdateOne {
	suo.mutation.SetPrice(s)
	return suo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillablePrice(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetPrice(*s)
	}
	return suo
}

// SetProductID sets the "product_id" field.
func (suo *StockUpdateOne) SetProductID(s string) *StockUpdateOne {
	suo.mutation.SetProductID(s)
	return suo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableProductID(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetProductID(*s)
	}
	return suo
}

// SetQuantity sets the "quantity" field.
func (suo *StockUpdateOne) SetQuantity(i int32) *StockUpdateOne {
	suo.mutation.ResetQuantity()
	suo.mutation.SetQuantity(i)
	return suo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableQuantity(i *int32) *StockUpdateOne {
	if i != nil {
		suo.SetQuantity(*i)
	}
	return suo
}

// AddQuantity adds i to the "quantity" field.
func (suo *StockUpdateOne) AddQuantity(i int32) *StockUpdateOne {
	suo.mutation.AddQuantity(i)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StockUpdateOne) SetCreatedAt(t time.Time) *StockUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableCreatedAt(t *time.Time) *StockUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StockUpdateOne) SetUpdatedAt(t time.Time) *StockUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// Mutation returns the StockMutation object of the builder.
func (suo *StockUpdateOne) Mutation() *StockMutation {
	return suo.mutation
}

// Where appends a list predicates to the StockUpdate builder.
func (suo *StockUpdateOne) Where(ps ...predicate.Stock) *StockUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StockUpdateOne) Select(field string, fields ...string) *StockUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stock entity.
func (suo *StockUpdateOne) Save(ctx context.Context) (*Stock, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockUpdateOne) SaveX(ctx context.Context) *Stock {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StockUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StockUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := stock.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StockUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := stock.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Stock.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Price(); ok {
		if err := stock.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Stock.price": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ProductID(); ok {
		if err := stock.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "Stock.product_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Quantity(); ok {
		if err := stock.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Stock.quantity": %w`, err)}
		}
	}
	return nil
}

func (suo *StockUpdateOne) sqlSave(ctx context.Context) (_node *Stock, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stock.FieldID)
		for _, f := range fields {
			if !stock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(stock.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(stock.FieldPrice, field.TypeString, value)
	}
	if value, ok := suo.mutation.ProductID(); ok {
		_spec.SetField(stock.FieldProductID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Quantity(); ok {
		_spec.SetField(stock.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedQuantity(); ok {
		_spec.AddField(stock.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(stock.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(stock.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Stock{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
