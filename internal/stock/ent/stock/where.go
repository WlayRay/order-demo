// Code generated by ent, DO NOT EDIT.

package stock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/WlayRay/order-demo/stock/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldID, id))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldProductID, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldQuantity, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldProductID, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int32) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int32) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldQuantity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.NotPredicates(p))
}
