// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/WlayRay/order-demo/stock/ent/schema"
	"github.com/WlayRay/order-demo/stock/ent/stock"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	stockFields := schema.Stock{}.Fields()
	_ = stockFields
	// stockDescName is the schema descriptor for name field.
	stockDescName := stockFields[1].Descriptor()
	// stock.NameValidator is a validator for the "name" field. It is called by the builders before save.
	stock.NameValidator = func() func(string) error {
		validators := stockDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stockDescPrice is the schema descriptor for price field.
	stockDescPrice := stockFields[2].Descriptor()
	// stock.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	stock.PriceValidator = func() func(string) error {
		validators := stockDescPrice.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(price string) error {
			for _, fn := range fns {
				if err := fn(price); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stockDescProductID is the schema descriptor for product_id field.
	stockDescProductID := stockFields[3].Descriptor()
	// stock.ProductIDValidator is a validator for the "product_id" field. It is called by the builders before save.
	stock.ProductIDValidator = func() func(string) error {
		validators := stockDescProductID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(product_id string) error {
			for _, fn := range fns {
				if err := fn(product_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stockDescQuantity is the schema descriptor for quantity field.
	stockDescQuantity := stockFields[4].Descriptor()
	// stock.QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	stock.QuantityValidator = stockDescQuantity.Validators[0].(func(int32) error)
	// stockDescCreatedAt is the schema descriptor for created_at field.
	stockDescCreatedAt := stockFields[5].Descriptor()
	// stock.DefaultCreatedAt holds the default value on creation for the created_at field.
	stock.DefaultCreatedAt = stockDescCreatedAt.Default.(func() time.Time)
	// stockDescUpdatedAt is the schema descriptor for updated_at field.
	stockDescUpdatedAt := stockFields[6].Descriptor()
	// stock.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	stock.DefaultUpdatedAt = stockDescUpdatedAt.Default.(func() time.Time)
	// stock.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	stock.UpdateDefaultUpdatedAt = stockDescUpdatedAt.UpdateDefault.(func() time.Time)
}
